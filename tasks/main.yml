---
# TODO: handle prefix if mmcblk device compared to vd or sd
# TODO: figure out when to use -c for host cache vs target cache (VM vs real)
-   name: Check for install_target_device variable
    fail: msg="Missing install_target_device"
    when: not install_target_device
-   fail: msg="Missing new_hostname"
    when: not new_hostname
-   name: Determine partition prefix
    set_fact:
        partiton_prefix: "{{ 'p' if install_target_device.startswith('mmcblk') else '' }}" 
-   name: Ensure that there is no existing partition table
    shell: '(lsblk -l /dev/{{ install_target_device }} --output TYPE --noheadings | grep -q part)'
    register: is_partitioned
    ignore_errors: true
-   name: Create Partition Table
    command: "parted --script --align optimal -- /dev/{{ install_target_device }}
            mklabel gpt
            mkpart ESP fat32 1MiB 513MiB
            set 1 boot on
            mkpart primary ext4 513MiB 100%"
    when: is_partitioned.rc == 1 # no partitions in partition table
-   name: Partprobe for new partition
    command: "partprobe /dev/{{ install_target_device }}"
    when: is_partitioned.rc == 1
-   name: Create root filesystem
    filesystem:
        dev: "/dev/{{ install_target_device }}{{ part_id_prefix }}2"
        fstype: ext4
        force: yes
    when: is_partitioned.rc == 1 # no partitions in partition table
-   name: Unmount anything on /mnt and /var/cache/pacman/pkg
    command: umount -R /mnt /var/cache/pacman/pkg
    ignore_errors: true
-   name: Mount root filesystem
    command: "mount -t ext4 /dev/{{ install_target_device }}{{ part_id_prefix }}2 /mnt"
-   name: Create boot filesystem
    command: "mkfs.fat -F32 /dev/{{ install_target_device }}{{ part_id_prefix }}1"
    when: is_partitioned.rc == 1 # no partitions in partition table
-   file: path=/mnt/boot state=directory
-   name: Mount boot filesystem
    command: "mount /dev/{{ install_target_device }}{{ part_id_prefix }}1 /mnt/boot"
-   name: Load 9p kernal modules
    modprobe: "name={{ item }}"
    with_items: ['9p', '9pnet', '9pnet_virtio']
    when: vm|bool
-   name: Mount package cache
    command: "mount -t 9p -o trans=virtio,version=9p2000.L pacman_cache /var/cache/pacman/pkg"
    ignore_errors: true
    when: vm|bool
-   name: Update keyring
    command: pacman --noconfirm -Sy archlinux-keyring
-   name: Install packages with pacstrap
    command: pacstrap {{ '-c' if vm|bool else '' }} /mnt 
        base base-devel openssh augeas ntp wget darkhttpd unzip dnsutils
        rsync dtach tmux gnu-netcat wpa_supplicant dialog alsa-utils vim
        git ethtool pv strace sysstat avahi nss-mdns lshw python2
    register: pacstrap
    tags: pacstrap
-   debug: msg="{{ pacstrap }}"
-   name: unmount package cache
    command: umount /var/cache/pacman/pkg
    when: vm|bool
-   name: Update fstab
    shell: "genfstab -p /mnt >> /mnt/etc/fstab"
-   lineinfile: dest="/mnt/etc/fstab" line="/dev/{{ install_target_device }}{{ part_id_prefix }}3   swap   swap   defaults   0   0"
-   file: state=link src=/usr/share/zoneinfo/US/Pacific path=/mnt/etc/localtime
-   name: Set LANG for locale
    copy: dest=/mnt/etc/locale.conf content="LANG=en_US.UTF-8"
-   name: set utf-8 for locale
    lineinfile: dest=/mnt/etc/locale.gen line="en_US.UTF-8 UTF-8"
-   name: set hostname to {{ new_hostname }}
    copy: dest=/mnt/etc/hostname content="{{ new_hostname }}"
-   name: Add avahi for hostname resolution
    lineinfile:
        dest: /mnt/etc/nsswitch.conf
        regexp: ^hosts
        line: "hosts: files mdns_minimal [NOTFOUND=return] dns myhostname"
-   name: Add ssh key
    authorized_key:
        user: root
        key: "{{ pub_key }}"
        path: /mnt/root/.ssh/authorized_keys
    become: yes
-   name: Allow 'wheel' group to have passwordless sudo
    lineinfile:
        dest: /mnt/etc/sudoers
        state: present
        regexp: '# %wheel ALL=(ALL) NOPASSWD: ALL'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'

-   shell: |
      arch-chroot /mnt <<EOF
        mkinitcpio -p linux
        pacman --noconfirm -S syslinux
        sed -i 's/sda3/{{ install_target_device }}{{ part_id_prefix }}2/' /boot/syslinux/syslinux.cfg
        syslinux-install_update -iam # install files(-i), set boot flag (-a), install MBR boot code (-m)
        locale-gen # I think this reads from locale.conf which we set to en_US.UTF-8 earlier
        systemctl enable sshd.service ntpd.service dhcpcd avahi-daemon
        exit # exit the chroot
      EOF
-   shell: umount /mnt/{boot,} 
